import dotenv from 'dotenv'
import ModelClient, { isUnexpected } from '@azure-rest/ai-inference'
import { AzureKeyCredential } from '@azure/core-auth'
import TelegramBot from 'node-telegram-bot-api'

dotenv.config()

const token = process.env.BOT_TOKEN
const gpt_token = process.env.GPT_API_KEY
const endpoint = 'https://models.github.ai/inference'
const model = 'openai/gpt-4.1'

if (!gpt_token) {
  console.error('GPT_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ!')
  process.exit(1)
}

const client = ModelClient(endpoint, new AzureKeyCredential(gpt_token))

if (!token) {
  console.error('BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ!')
  process.exit(1)
}

const bot = new TelegramBot(token, { polling: true })

const userStates = new Map()

const mainMenuKeyboard = {
  reply_markup: {
    keyboard: [
      [{ text: 'üìö –°—Ç—É–¥–µ–Ω—Ç' }, { text: 'üíª IT-—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó' }],
      [{ text: 'üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏' }, { text: 'ü§ñ –ó–∞–ø–∏—Ç –¥–æ GPT' }],
    ],
    resize_keyboard: true,
    one_time_keyboard: false,
  },
}

const backKeyboard = {
  reply_markup: {
    keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é' }]],
    resize_keyboard: true,
    one_time_keyboard: false,
  },
}

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id
  const welcomeMessage = `–ü—Ä–∏–≤—ñ—Ç, ${msg.from.first_name}! üëã

–¶–µ –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –∑ –º–µ–Ω—é –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ ‚Ññ3.

–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:`

  bot.sendMessage(chatId, welcomeMessage, mainMenuKeyboard)
})

bot.on('message', (msg) => {
  const chatId = msg.chat.id
  const text = msg.text

  if (text === '/start') return

  switch (text) {
    case 'üìö –°—Ç—É–¥–µ–Ω—Ç':
      handleStudentSection(chatId)
      break
    case 'üíª IT-—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó':
      handleTechSection(chatId)
      break
    case 'üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏':
      handleContactsSection(chatId)
      break
    case 'ü§ñ –ó–∞–ø–∏—Ç –¥–æ GPT':
      handlePromptSection(chatId)
      break
    case 'üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é':
      userStates.delete(chatId)
      bot.sendMessage(chatId, '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:', mainMenuKeyboard)
      break
    default:
      if (userStates.get(chatId) === 'prompt_mode') {
        handleGPTMessage(chatId, text)
      } else {
        bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é üëá', mainMenuKeyboard)
      }
  }
})

function handleStudentSection(chatId) {
  const studentInfo = `
    üìù –ü—Ä—ñ–∑–≤–∏—â–µ: –ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ –û–ª–µ–∫—Å–∞–Ω–¥—Ä
    üéì –ì—Ä—É–ø–∞: –Ü–ú-22
    üìö –ü—Ä–µ–¥–º–µ—Ç: –û—Å–Ω–æ–≤–∏ WEB-–ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è
    üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞: ‚Ññ3 - Telegram Bot`

  bot.sendMessage(chatId, studentInfo, backKeyboard)
}

function handleTechSection(chatId) {
  const techInfo = `üíª IT-—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó`
  bot.sendMessage(chatId, techInfo, backKeyboard)
}

function handleContactsSection(chatId) {
  const contactInfo = `üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    üì± –¢–µ–ª–µ—Ñ–æ–Ω: +380123456789
    üìß Email: bondarenko@example.com
`

  bot.sendMessage(chatId, contactInfo, backKeyboard)
}

function handlePromptSection(chatId) {
  userStates.set(chatId, 'prompt_mode')
  const promptInfo = `ü§ñ –í–∏ —É–≤—ñ–π—à–ª–∏ –≤ —Ä–µ–∂–∏–º GPT —á–∞—Ç—É!

–¢–µ–ø–µ—Ä –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ —Å–≤–æ—ó –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, —ñ —è –±—É–¥—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ —á–µ—Ä–µ–∑ GPT.

–©–æ–± –≤–∏–π—Ç–∏ –∑ —Ä–µ–∂–∏–º—É —á–∞—Ç—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é"`

  bot.sendMessage(chatId, promptInfo, backKeyboard)
}

async function handleGPTMessage(chatId, message) {
  try {
    bot.sendMessage(chatId, 'ü§î –û–±—Ä–æ–±–ª—è—é –≤–∞—à –∑–∞–ø–∏—Ç...')

    const response = await client.path('/chat/completions').post({
      body: {
        messages: [{ role: 'user', content: message }],
        model: model,
        temperature: 1,
        top_p: 1,
      },
    })

    const reply = response.body.choices[0].message.content
    bot.sendMessage(chatId, reply, backKeyboard)
  } catch (error) {
    console.error('GPT API Error:', error)
    bot.sendMessage(chatId, '‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', backKeyboard)
  }
}

bot.on('polling_error', (error) => {
  console.log('Polling error:', error)
})

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...')
console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏: /start')
